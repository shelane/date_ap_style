<?php

/**
 * @file
 * Formats dates and times to use "AP" Style.
 */

/**
 * Implements hook_permission().
 */
function date_ap_style_permission() {
  return array(
    'administer ap style settings' => array(
      'title' => t('Configure default AP style settings'),
      'description' => t('Allows users to configure default AP style settings.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_menu().
 */
function date_ap_style_menu() {
  $items['admin/config/content/date-ap-style'] = array(
    'title' => 'AP Style Date Display Settings',
    'description' => 'Configure AP date style default settings when using the AP date style format.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('date_ap_style_admin_form'),
    'access arguments' => array('administer ap style settings'),
    'file' => 'includes/ap_date.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_views_api().
 */
function date_ap_style_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'date_ap_style'),
  );
}

 * Implements hook_field_formatter_info().
 */
function date_ap_style_field_formatter_info() {

  return array(
    'ap_date' => array(
      'label' => t('AP Style Date'),
      'description' => t('Displays a date as AP Style.'),
      'field types' => array('date', 'datestamp', 'datetime'),
      'settings' => array(
        'date_ap_style_output' => variable_get('date_ap_style_defaults', array()),
      ),
    ),
  );
}
/**
 * Implements hook_field_formatter_view().
 */
function date_ap_style_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {

  $element = array();
  $settings = $display['settings'];
  switch ($display['type']) {
    case 'ap_date':
        foreach ($items as $delta => $item) {
          $timezone = date_get_timezone($field['settings']['tz_handling'], isset($item['timezone']) ? $item['timezone'] : date_default_timezone());
          $value = date_local_date($item, $timezone, $field, $instance, $part = 'value');
          $value_local = date_format_date($value, $type = 'custom', $format = 'Y-m-d H:i:s');
          $value = date_ap_style_ap_date_string($value_local, $settings);
          if ($settings['show_time']) {
            $value_time = date_ap_style_time_string($value_local, $settings);
          }
          if (isset($item['value2'])) {
            $value2 = date_local_date($item, $timezone, $field, $instance, $part = 'value2');
            $value2_local = date_format_date($value2, $type = 'custom', $format = 'Y-m-d H:i:s');
            $value2 = date_ap_style_ap_date_string($value2_local, $settings);
            $value2_time = date_ap_style_time_string($value2_local, $settings);
            $element[$delta] = array('#markup' => $value_time . ' ' . $value . ' to ' . $value2_time . ' - ' . $value2);
            if ($value == $value2 & $settings['show_time'] == TRUE) {
              $element[$delta] = array('#markup' => $value_time . ' to ' . $value2_time . ' ' . $value);
              if ($value_time == $value2_time && $settings['show_time'] == TRUE) {
                $element[$delta] = array('#markup' => $value_time . ' - ' . $value);
                if ($settings['use_all_day'] == TRUE) {
                  if (strcasecmp($value2_time, 'midnight') == 0 ) {
                    $element[$delta] = array('#markup' => t('All Day')  . ' ' . $value);
                  }
                }
              }
            }
          }
          else {
            $element[$delta] = array('#markup' => $value);
              if ($settings['show_time'] == TRUE) {
                $element[$delta] = array('#markup' => $value_time . ' ' . $value);
            }
          }
        }
      break;
  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function date_ap_style_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {

  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $element = array();
  $element['use_today'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use today'),
    '#default_value' => $settings['use_today'],
  );
  $element['cap_today'] = array(
    '#type' => 'checkbox',
    '#title' => t('Capitalize today'),
    '#default_value' => $settings['cap_today'],
  );
  $element['use_year'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use year'),
    '#default_value' => $settings['use_year'],
  );
  $element['cap_noon'] = array(
    '#type' => 'checkbox',
    '#title' => t('Capitalize noon and midnight'),
    '#default_value' => $settings['cap_noon'],
  );
  $element['show_time'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show time'),
    '#default_value' => $settings['show_time'],
  );
  $element['use_all_day'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show "All Day" instead of midnight.'),
    '#default_value' => $settings['use_all_day'],
  );
  $element['use_dow'] = array(
    '#type' => 'checkbox',
    '#title' => t('If a date occurs in the current week use day of week'),
    '#default_value' => $settings['use_dow'],
  );

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function date_ap_style_field_formatter_settings_summary($field, $instance, $view_mode) {

  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $summary = t(
        'Date field settings @use_today, @cap_today, @use_year', array(
        // We use t() for translation and placeholders to guard against attacks.
          '@use_today' => ($settings['use_today'] == TRUE ? t('Use Today') : t('Do not use today')),
          '@cap_today' => ($settings['cap_today'] == TRUE ? t('Capitalize Today') : t('Do not capitalize today')),
          '@use_year' => ($settings['use_year'] == TRUE ? t('Use year') : t('Do not use year')),
          '@cap_noon' => ($settings['cap_noon'] == TRUE ? t('Capitalize noon and midnight') : t('Do not capitalize non and midnight')),
        )
    );

  return $summary;
}

/**
 * Creates an AP Style formatted date string from a date string.
 *
 * @param $date_string
 *   A string that can be interpreted by strtotime().
 * @param $settings
 *   An array containing settings set in field display configuration.
 *
 * @return
 *   An AP Style formatted date string.
 */
function date_ap_style_ap_date_string($date_string, $settings) {

  $input_datetime = strtotime($date_string);
  $ap_string = '';
  $use_today = $settings['use_today'];
  $cap_today = $settings['cap_today'];
  $use_year = $settings['use_year'];

  // Determine the month and set the AP Style abbreviation.
  $input_month = date('m', $input_datetime);
  $ap_month = '';
  switch ($input_month) {
    case '01':
        $ap_month = 'Jan.';
      break;

    case '02':
        $ap_month = 'Feb.';
      break;

    case '08':
        $ap_month = 'Aug.';
      break;

    case '09':
        $ap_month = 'Sept.';
      break;

    case '10':
        $ap_month = 'Oct.';
      break;

    case '11':
        $ap_month = 'Nov.';
      break;

    case '12':
        $ap_month = 'Dec.';
      break;

    default:
        $ap_month = date('F', $input_datetime);
  }

  // Determine whether the date is within the current year.
  $input_year = date('Y', $input_datetime);
  $ap_year = '';
  if ($input_year != date('Y') || $use_year) {
    $ap_year = ', ' . $input_year;
  }

  // Determine whether the date is within the current week and set the final output.
  $current_week = date('W');
  $week_number  = date('W', $input_datetime);
  // Determine whether the date is the current date and set the final output.
  $today = strtotime('today');
  if ($current_week == $week_number && $use_dow) {
    $ap_string = date('l', $input_datetime);
  }
  elseif ($input_datetime == $today && $use_today) {
    $ap_string = $cap_today ? 'Today' : 'today';
  }
  else {
    $ap_string = $ap_month . ' ' . date('j', $input_datetime) . $ap_year;
  }

  return $ap_string;
}

/**
 *
 * @param $date_string
 *   A string that can be interpreted by strtotime().
 * @param $settings
 *   Array containing settings set in field display configuration.
 *
 * @return
 *   An AP Style formatted time string.
 */
function date_ap_style_time_string($date_string, $settings) {

  $input_datetime = strtotime($date_string);
  $cap_noon = $settings['cap_noon'];

  // Format am and pm to AP Style abbreviations.
  if (date('a', $input_datetime) == 'am') {
      $modmeridian = 'a.m.';
  }
  elseif (date('a', $input_datetime) == 'pm') {
    $modmeridian = 'p.m.';
  }
  // Reformat 12:00 and 00:00 to noon and midnight.
  if (date('H:i', $input_datetime) == '00:00') {
    if ($cap_noon == TRUE) {
      $ap_time_string = 'Midnight';
    }
    else {
      $ap_time_string = 'midnight';
    }
  }
  elseif (date('H:i', $input_datetime) == '12:00') {
    if ($cap_noon == TRUE) {
      $ap_time_string = 'Noon';
    }
    else {
      $ap_time_string = 'noon';
    }
  }
  // Eliminate trailing zeroes from times at the top of the hour and set final output.
  elseif (date('i', $input_datetime) == '00') {
    $ap_time_string = date('g', $input_datetime) . ' ' . $modmeridian;
  }
  else {
    $ap_time_string = date('g:i', $input_datetime) . ' ' . $modmeridian;
  }
  return ($ap_time_string);
}
